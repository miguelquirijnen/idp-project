// First name: Miguel
// Last name: Quirijnen
// Student number: r0710304


// FIXED VOCABULARY
// DO NOT CHANGE THIS VOCABULARY
LTCvocabulary V_fixed {
    type Time isa nat			// A set of time points
    Start: Time 				// The initial time point
    partial Next(Time): Time 	// The successor time point of time point t
    
    type Floor isa nat									// The set of floors
    type DoorState constructed from {Closed, Open}		// A set of possible states of the elevator’s doors
	
    // Fluents
    ElPosition(Time):Floor				// The floor of the elevator at time point t
    ElDoorState(Time):DoorState			// The state of the elevator’s doors at time point t
    UnansweredRequest(Time, Floor)		// Denotes that there is an unanswered request at floor f at time point t
    
    // Actions
    MakeRequest(Time, Floor) 			// Denotes that a request is made for floor f at time point t
}


// STUDENT VOCABULARY
// Here you can add new types, functions and predicates
LTCvocabulary V_student {
    extern vocabulary V_fixed
    
    C_floor(Time, Floor)
    Cn_floor(Time, Floor)
    
    C_door(Time)
    Cn_door(Time)
    
    C_request(Time, Floor)
    Cn_request(Time, Floor)
    
    // Causes-predicates
    ascending(Time)
    descending(Time)
    
    prioritizeUp(Time)
    prioritizeDown(Time)
    
    isClosestBelow(Time, Floor)
    test(Time)
    test2(Time)
    
    MinFloor: Floor
    MaxFloor: Floor
}

// TIME THEORY
// DO NOT CHANGE THIS THEORY
Theory T_fixed : V_student {
    // Defining time
    {
        Start = MIN[:Time].
        ! t: Next(t) = t+1 <- Time(t+1).
    }
}


// STUDENT THEORY
// Here you should model the dynamic elevator system
Theory T_student:V_student {
    {
        MaxFloor = MAX[:Floor].
        MinFloor = MIN[:Floor].
    }
    
    
	{ // Successor state axioms floor level
        ElPosition(Start) = MIN[:Floor]. 
        ! t[Time] f[Floor]: ElPosition(Next(t)) = f <- C_floor(t, f).
		! t[Time] f[Floor]: ElPosition(Next(t)) = f <- ElPosition(t) = f & ~Cn_floor(t,f). 
    } 
    
    { // Causes floor level
        ! t[Time] f[Floor]: C_floor(t,f+1) <- 
        	ascending(t) & ~UnansweredRequest(t, f) & ElPosition(t) = f
        	& ElDoorState(t) = Closed.
        ! t[Time] f[Floor]: C_floor(t,f-1) <- 
        	descending(t) & ~UnansweredRequest(t, f) & ElPosition(t) = f
        	& ElDoorState(t) = Closed.
        ! t[Time] f[Floor]: Cn_floor(t,f) <- ? g[Floor]: C_floor(t,g) & f ~= g.
    }
    
    { // Successor state axioms requests
        ! t[Time] f[Floor]: UnansweredRequest(Next(t), f) <- C_request(t, f).
        ! t[Time] f[Floor]: UnansweredRequest(Next(t), f) <- 
        	UnansweredRequest(t, f) & ~Cn_request(t, f).
    }
    
    { // Causes requests
        // Make a new UnansweredRequest.
        ! t[Time] f[Floor]: C_request(t, f) <- MakeRequest(t,f).
        // Keep UnansweredRequest if on same floor but not closed yet.
        ! t[Time] f[Floor]: Cn_request(Next(t), f) 
        	<-  ElPosition(t)=f & ElDoorState(Next(t)) = Open.
    }
    
    { // Successor state axiom doors
        // Doors are closed in the start state
        ElDoorState(Start) = Closed. 
        // Doors open if it gets caused
        ! t[Time]: ElDoorState(Next(t)) = Open <- C_door(t). 
        // Doors remain open if not uncaused
        ! t[Time]: ElDoorState(Next(t)) = Open <- ElDoorState(t) = Open & ~Cn_door(t). 
        // Doors close when uncaused
		! t[Time]: ElDoorState(Next(t)) = Closed <- Cn_door(t). 
        // Doors remain closed if not caused
        ! t[Time]: ElDoorState(Next(t)) = Closed <- ElDoorState(t) = Closed & ~C_door(t). 
    }
    
    { // Causes doors 
        // When closing doors the doors close
        ! t[Time]: C_door(t) <- UnansweredRequest(t, ElPosition(t)) & ElDoorState(t) = Closed.
        // When door changes it gets incaused
        ! t[Time]: Cn_door(t) <- ElDoorState(t) = Open.
    }
    
    // No ascend and descend at the same time
    ~? t[Time]: ascending(t) & descending(t).
    
    {
        // Start ascending
        ! t[Time]: ascending(t) <-  ~descending(t)
        	& (~? f[Floor]: UnansweredRequest(t,f) & f =< ElPosition(t))
        	& (? g[Floor]: UnansweredRequest(t,g) & ElPosition(t) < g).
        // Keep ascending when responding to request above
        ! t[Time]: ascending(Next(t)) <- (ascending(t))
        	& (? f[Floor]: UnansweredRequest(Next(t),f) & ElPosition(t) < f).
        // Several new unanswered, above wins or tie
        ! t[Time]: ascending(Next(t)) <- 
        	(~? f[Floor]: UnansweredRequest(t,f))
        	 & prioritizeUp(Next(t)).
        
        // Start descending
        ! t[Time]: descending(t) <- ~ascending(t)
        	& (~? f[Floor]: UnansweredRequest(t,f) & ElPosition(t) =< f) 
        	& (? g[Floor]: UnansweredRequest(t,g) & g < ElPosition(t)).
        // Keep descending when responding to request below
         ! t[Time]: descending(Next(t)) <- (descending(t))
        	& (? f[Floor]: UnansweredRequest(Next(t),f) & f < ElPosition(t)).
        // Several new unanswered, below wins
        ! t[Time]: descending(Next(t)) <- 
        	(~? f[Floor]: UnansweredRequest(t,f))
        	& prioritizeDown(Next(t)).
    }
    
    {
        // In case of multiple request, determine whether the above one wins or ties
        ! t[Time]: prioritizeUp(t) <- 
        	?>1 f[Floor]:  UnansweredRequest(t,f) 
        	& ~? g[Floor]: UnansweredRequest(t,g) & g < ElPosition(t) 
        	& isClosestBelow(t, g).
        
        // In case of multiple request, determine whether the bottom one wins
        ! t[Time]: prioritizeDown(t) <- 
        	?>1 f[Floor]:  UnansweredRequest(t,f) 
        	& ? g[Floor]: UnansweredRequest(t,g) & g < ElPosition(t)
        	& isClosestBelow(t, g).
        
        // Check whether the given floor below is the closest
        ! t[Time] f[Floor]: isClosestBelow(t, f) <- ~? g[Floor]: UnansweredRequest(t,g) & f<g
        		& abs(ElPosition(t)-f) >= abs(ElPosition(t)-g).
    } 
}

// INVARIANTS

// If elevator moves the doors are closed!
theory move_inv : V_student {
    ! t[Time]: ElPosition(t) ~= ElPosition(Next(t)) 
    	=> ElDoorState(t) = Closed & ElDoorState(Next(t)) = Closed.
}

// Doors are never open if there is no call waiting on that floor
theory door_inv : V_student {
    ~? t[Time]: ElDoorState(t) = Open & ~UnansweredRequest(t,ElPosition(t)).
}


// MAIN PROCEDURE
// If you have to change the main procedure for debugging purposes, be careful and restore it back once you finish debugging.
procedure main() {
    /*
    local CompleteTheory = merge(T_fixed, T_student) 
    
    // Change the structure name to try other structures (check the included file "structures.idp" for available provided structures, and feel free to add additional structures)     
    
    model = onemodel(CompleteTheory, S5)
    
    // Printing model 
    print(model)

    // Visualization
    initVisualization()
    visualizeElevator(model)
    */
    proveInvariants()
    
}

procedure proveInvariants(){
    print(isinvariant(T_student, move_inv , S_Inv)) 
    print(isinvariant(T_student, door_inv , S_Inv))
}

Structure S_Inv: V_student {
    Time = {0..20}
    Floor = {0..5}
    Start = 0
}

// File responsible for visualization  
include "visualize_elevator.idp"

// Structures for testing
// You can open this file and check the given structures 
include "structures.idp"
