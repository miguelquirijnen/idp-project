vocabulary V {
        type index isa int
        queen(index, index) // queen(x, y) is true iff 
    						//there is a queen on row x, column y.
        n : index
        type diag isa int
        diag1(index, index) : diag // These functions map locations on the board
        diag2(index, index) : diag // to their diagonals
}

theory T : V {
        { diag1(x, y) = x - y + n. }
        { diag2(x, y) = x + y - 1. }
    
    // There is exactly one queen in every row
	!i2[index]: #{i1[index]: queen(i1, i2)} = 1.
    
    // There is exactly one queen in every column
	!i1[index]: #{i2[index]: queen(i1, i2)} = 1.
    
    // There can not be more than one queen on any diagonal (2 constraints)
	!i1[index], i2[index], i3[index], i4[index]: queen(i1, i2) & queen(i3, i4) & ~(i1 = i3 & i2 = i4) => diag1(i1, i2) ~= diag1(i3, i4).


	!i1[index], i2[index], i3[index], i4[index]: queen(i1, i2) & queen(i3, i4) & ~(i1 = i3 & i2 = i4) => diag2(i1, i2) ~= diag2(i3, i4).
}


include "nqueens_solution.aidp"
include "nqueens_draw.idp"
include "nqueens_instance_1.idp"
//include "nqueens_instance_2.idp"
//include "nqueens_instance_3.idp"
include "idpd3/run.idp"