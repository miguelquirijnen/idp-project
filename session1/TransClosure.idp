vocabulary TCVoc {
    type Node
    Edge(Node, Node)

    Reach(Node, Node)
}

// Some different ways to (try to) express reachability in FO

// First one: 
// Edges are reachable, if n2 is reachable from n1 and n3 from n2, then n3 is reacyable from n1
theory FOTheo1 : TCVoc {
    ! n1 n2: Edge(n1, n2) => Reach(n1, n2).
    ! n1 n2 n3: Reach(n1, n2) & Reach(n2, n3) => Reach(n1, n3).
}

// Second attempt (stronger): The previous implications hold, but it is stronger. In fact, it is an equivalence. 
// n3 is reachable from n1 IF AND ONLY IF  it is one of the two cases above. 
theory FOTheo2 : TCVoc {
    ! n1 n2 n3: (Reach(n1, n3) | (Reach(n1, n2) & Reach(n2, n3))) <=> Reach(n1, n3).
}

/*
 * Hmmm... Non of the two FO theories seem to do the job.
 * Let's use an inductive definition. 
 * Reach is *defined* by the two rules we have in our head.
 * 
 * SURPRISE: it works ;-)
 */
theory FODOTTheory : TCVoc {
    {
        ! n1 n2: Reach(n1, n2) <- Edge(n1, n2).
        ! n1 n3: Reach(n1, n3) <- ? n2 : Reach(n1, n2) & Reach(n2, n3).
    }
}
structure TCStruc : TCVoc {
    Node = {A..B}
    Edge = {A, A}
}

procedure main(){
    stdoptions.nbmodels = 0
    sols = modelexpand(FOTheo1, TCStruc)
    if #sols > 1 then
        print("FOTheo1 gave me too much models")
    else
        print("Found the correct transitive closure using FOTheo1:")
        print(sols[1])
    end

    sols2 = modelexpand(FOTheo2, TCStruc)
    if #sols2 > 1 then
        print("FOTheo2 gave me too much models")
    else
        print("Found the correct transitive closure using FOTheo2:")
        print(sols2[1])
    end

    sols3 = modelexpand(FODOTTheory, TCStruc)
    if #sols3 > 1 then
        print("FODOTTheory gave me too much models")
    else
        print("Found the correct transitive closure using FODOTTheory. The solution is:")
        print(sols3[1])
    end
}
