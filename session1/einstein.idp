// Solution to the simplified einstein puzzle

vocabulary Einstein {
    type House constructed from {Red, Green, Blue}
    type Person constructed from {Am, Bel, Ger}
    type Animal constructed from {Dog, Cat, Fish}

    LivesIn(Person):House
    HasAnimal(Person):Animal
    Owner(Animal):Person
}

theory Theo : Einstein {
    // Every house is owned by one person exactly
    ! h[House]: ?1 p[Person]: LivesIn(p) = h.

    // Every Animal is owned by one person exactly
    // THIS CONSTRAINT IS NOT NEEDED, SINCE IT FOLLOWS FROM THE NEXT ONE
    ! a[Animal]: ?1 p[Person]: HasAnimal(p) = a.
    // HasAnimal and Owner are each other's inverse
    ! a[Animal]: HasAnimal(Owner(a)) = a.
    ! p[Person]: Owner(HasAnimal(p)) = p.

    // The person who owns the fish lives in the blue house
    LivesIn(Owner(Fish)) = Blue.

    // The american does not live in the blue house
    LivesIn(Am) ~= Blue.

    // The Belgian guy dislikes dogs and the color red
    LivesIn(Bel) ~= Red & Owner(Dog) ~= Bel.

    // The person who lives in the green house has a dog
    ! p[Person]: LivesIn(p) = Green => HasAnimal(p) = Dog.

    // If the german has a cat, then he lives in the blue house
    HasAnimal(Ger) = Cat => LivesIn(Ger) = Blue.
}

structure S: Einstein {

}

procedure main() {
    // try to find two models
    stdoptions.nbmodels = 2
    // This should fail, only one should be obtained.
    printmodels(modelexpand(Theo, S))
}
