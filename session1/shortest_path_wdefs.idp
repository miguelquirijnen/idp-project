vocabulary V{
    type Node
    Edge(Node,Node)
    EdgeOnPath(Node,Node)
    Start:Node
    End:Node
    
    // Extra symbols if needed
    Reach(Node)
}

theory PathTheory:V{
    // at most one outgoing edge
    ! x: #{y: EdgeOnPath(x, y)} =< 1.
    // at most one incoming edge
    ! y: #{x: EdgeOnPath(x, y)} =< 1.

    // every connection in the path is an edge
    ! x y: EdgeOnPath(x, y) => Edge(x, y).

    // no edge before start
    ! x: ~EdgeOnPath(x, Start).
    // no edge after end
    ! y: ~EdgeOnPath(End, y).
    
    { // definition of reachability from start with EdgeOnPath
        Reach(Start).
        ! x y: Reach(y) <- Reach(x) & EdgeOnPath(x, y).
    }
    // End is reached from Start
    Reach(End).
}

term Length : V {
    #{x y : EdgeOnPath(x, y)}
}


structure S : V {
    Node = {1..7}
    Edge = {1,2;2,3;3,4;4,5;5,2;5,1;4,2;2,5;6,7}
    Start = 1
    End = 5
}

include <mx>

procedure main(){
    stdoptions.nbmodels = 0
    printmodels(minimize(PathTheory, S, Length))
}
