vocabulary V {
    type Time isa nat
    partial Next(Time) : Time
    Start : Time

    type Person
    type Book

    owns(Time, Person, Book)
    I_owns(Person, Book) // Initial predicate for owns
    C_owns(Time, Person, Book)
    Cn_owns(Time, Person, Book)

    give(Time, Person, Book, Person)
}

structure S : V {
    Time = {0..5}
    Person = { Bob; John; Mary; }
    Book = { B1; B2; B3; }

    // Initially
    I_owns = { Bob,B1; John,B2; Mary,B3; }
}

theory timeTheo : V {
    {
        Start = MIN[:Time].
        ! t: Next(t) = t + 1 <- Time(t + 1).
    }
}

theory T : V {
    {
        // Successor State Action Axiom & Inertia
        ! p[Person] b[Book]: owns(Start, p, b) <- I_owns(p, b).
        ! t[Time] p[Person] b[Book]: owns(Next(t), p, b) <- C_owns(t, p, b).
        ! t[Time] p[Person] b[Book]: owns(Next(t), p, b) <- owns(t, p, b) & ~Cn_owns(t, p, b).
    }

    {
        // Expressing causations
        // TODO: when is owns caused?
        ! t[Time] p[Person] b[Book]: C_owns(t, p, b) <- ? q[Person] :give(t, q, b, p).
        // TODO: when is owns uncaused?
        ! t[Time] p[Person] b[Book]: Cn_owns(t, p, b) <- ? q[Person] : give(t, p, b, q).
    }

    // Preconditions
    // - A person needs to own a book if he wants to give it away
	! p[Person] q[Person] t[Time] b[Book]: give(t,p,b,q) => owns(t,p,b).
    // - A book can be given to only one person
	! p[Person] t[Time] b[Book]: ?=<1 q[Person] : give(t,p,b,q).
    // - A person cannot give a book to himself
	! p[Person] q[Person] t[Time] b[Book]: give(t,p,b,q) => p~=q.
}

procedure findmodels() {
    local timeExpanded = calculatedefinitions(timeTheo, S)
    stdoptions.nbmodels = 5
    printmodels(modelexpand(T, timeExpanded))
}



procedure simulate() {
    stdoptions.nbmodels = 5
    print("----> Starting interactive simulation")
    local states = initialise(T, S)

    // use one of those initial states to continue with (again and again and ...)
    while true do
        printmodels(states)
        print("Please enter which state to use")
        local num = tonumber(io.read("*line"))
        if num == nil then
            break
        elseif num < 1 or num > 5 then
            break
        end
        local chosen = states[num]
        states = progress(T, chosen)
    end
}



procedure main() {
    // This method lets you walk through your solutions interactively
    simulate()
    // This method (defined above) simply searches models of your theory
    findmodels()
}